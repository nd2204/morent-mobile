/* tslint:disable */
/* eslint-disable */
/**
 * Morent.WebApi | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CarImageDto } from '../models';
// @ts-ignore
import type { CarImageOrderItem } from '../models';
// @ts-ignore
import type { CreateCarCommand } from '../models';
// @ts-ignore
import type { ProblemDetails } from '../models';
// @ts-ignore
import type { UpdateCarCommand } from '../models';
/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} carId 
         * @param {string} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCarCarIdImagesImageIdPost: async (carId: string, imageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carId' is not null or undefined
            assertParamExists('apiAdminCarCarIdImagesImageIdPost', 'carId', carId)
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('apiAdminCarCarIdImagesImageIdPost', 'imageId', imageId)
            const localVarPath = `/api/admin/car/{carId}/images/{imageId}`
                .replace(`{${"carId"}}`, encodeURIComponent(String(carId)))
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} carId 
         * @param {string} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCarCarIdImagesImageIdSetPrimaryPut: async (carId: string, imageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carId' is not null or undefined
            assertParamExists('apiAdminCarCarIdImagesImageIdSetPrimaryPut', 'carId', carId)
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('apiAdminCarCarIdImagesImageIdSetPrimaryPut', 'imageId', imageId)
            const localVarPath = `/api/admin/car/{carId}/images/{imageId}/set-primary`
                .replace(`{${"carId"}}`, encodeURIComponent(String(carId)))
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} carId 
         * @param {File} [image] 
         * @param {string} [imageUrl] 
         * @param {boolean} [setAsPrimary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCarCarIdImagesPost: async (carId: string, image?: File, imageUrl?: string, setAsPrimary?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carId' is not null or undefined
            assertParamExists('apiAdminCarCarIdImagesPost', 'carId', carId)
            const localVarPath = `/api/admin/car/{carId}/images`
                .replace(`{${"carId"}}`, encodeURIComponent(String(carId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (image !== undefined) { 
                localVarFormParams.set('Image', image as any);
            }
    
            if (imageUrl !== undefined) { 
                localVarFormParams.set('ImageUrl', imageUrl as any);
            }
    
            if (setAsPrimary !== undefined) { 
                localVarFormParams.set('SetAsPrimary', setAsPrimary as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} carId 
         * @param {Array<CarImageOrderItem>} carImageOrderItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCarCarIdImagesReorderPut: async (carId: string, carImageOrderItem: Array<CarImageOrderItem>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carId' is not null or undefined
            assertParamExists('apiAdminCarCarIdImagesReorderPut', 'carId', carId)
            // verify required parameter 'carImageOrderItem' is not null or undefined
            assertParamExists('apiAdminCarCarIdImagesReorderPut', 'carImageOrderItem', carImageOrderItem)
            const localVarPath = `/api/admin/car/{carId}/images/reorder`
                .replace(`{${"carId"}}`, encodeURIComponent(String(carId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carImageOrderItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCarIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdminCarIdDelete', 'id', id)
            const localVarPath = `/api/admin/car/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCarCommand} updateCarCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCarIdPut: async (id: string, updateCarCommand: UpdateCarCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAdminCarIdPut', 'id', id)
            // verify required parameter 'updateCarCommand' is not null or undefined
            assertParamExists('apiAdminCarIdPut', 'updateCarCommand', updateCarCommand)
            const localVarPath = `/api/admin/car/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCarCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCarCommand} createCarCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCarPost: async (createCarCommand: CreateCarCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCarCommand' is not null or undefined
            assertParamExists('apiAdminCarPost', 'createCarCommand', createCarCommand)
            const localVarPath = `/api/admin/car`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCarCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} carId 
         * @param {string} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCarCarIdImagesImageIdPost(carId: string, imageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCarCarIdImagesImageIdPost(carId, imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminCarCarIdImagesImageIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} carId 
         * @param {string} imageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCarCarIdImagesImageIdSetPrimaryPut(carId: string, imageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarImageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCarCarIdImagesImageIdSetPrimaryPut(carId, imageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminCarCarIdImagesImageIdSetPrimaryPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} carId 
         * @param {File} [image] 
         * @param {string} [imageUrl] 
         * @param {boolean} [setAsPrimary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCarCarIdImagesPost(carId: string, image?: File, imageUrl?: string, setAsPrimary?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarImageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCarCarIdImagesPost(carId, image, imageUrl, setAsPrimary, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminCarCarIdImagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} carId 
         * @param {Array<CarImageOrderItem>} carImageOrderItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCarCarIdImagesReorderPut(carId: string, carImageOrderItem: Array<CarImageOrderItem>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCarCarIdImagesReorderPut(carId, carImageOrderItem, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminCarCarIdImagesReorderPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCarIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCarIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminCarIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCarCommand} updateCarCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCarIdPut(id: string, updateCarCommand: UpdateCarCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCarIdPut(id, updateCarCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminCarIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCarCommand} createCarCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCarPost(createCarCommand: CreateCarCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCarPost(createCarCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminCarPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @param {AdminApiApiAdminCarCarIdImagesImageIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCarCarIdImagesImageIdPost(requestParameters: AdminApiApiAdminCarCarIdImagesImageIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdminCarCarIdImagesImageIdPost(requestParameters.carId, requestParameters.imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminApiApiAdminCarCarIdImagesImageIdSetPrimaryPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCarCarIdImagesImageIdSetPrimaryPut(requestParameters: AdminApiApiAdminCarCarIdImagesImageIdSetPrimaryPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<CarImageDto> {
            return localVarFp.apiAdminCarCarIdImagesImageIdSetPrimaryPut(requestParameters.carId, requestParameters.imageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminApiApiAdminCarCarIdImagesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCarCarIdImagesPost(requestParameters: AdminApiApiAdminCarCarIdImagesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CarImageDto> {
            return localVarFp.apiAdminCarCarIdImagesPost(requestParameters.carId, requestParameters.image, requestParameters.imageUrl, requestParameters.setAsPrimary, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminApiApiAdminCarCarIdImagesReorderPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCarCarIdImagesReorderPut(requestParameters: AdminApiApiAdminCarCarIdImagesReorderPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdminCarCarIdImagesReorderPut(requestParameters.carId, requestParameters.carImageOrderItem, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminApiApiAdminCarIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCarIdDelete(requestParameters: AdminApiApiAdminCarIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdminCarIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminApiApiAdminCarIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCarIdPut(requestParameters: AdminApiApiAdminCarIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdminCarIdPut(requestParameters.id, requestParameters.updateCarCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminApiApiAdminCarPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCarPost(requestParameters: AdminApiApiAdminCarPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdminCarPost(requestParameters.createCarCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiAdminCarCarIdImagesImageIdPost operation in AdminApi.
 * @export
 * @interface AdminApiApiAdminCarCarIdImagesImageIdPostRequest
 */
export interface AdminApiApiAdminCarCarIdImagesImageIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiApiAdminCarCarIdImagesImageIdPost
     */
    readonly carId: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiApiAdminCarCarIdImagesImageIdPost
     */
    readonly imageId: string
}

/**
 * Request parameters for apiAdminCarCarIdImagesImageIdSetPrimaryPut operation in AdminApi.
 * @export
 * @interface AdminApiApiAdminCarCarIdImagesImageIdSetPrimaryPutRequest
 */
export interface AdminApiApiAdminCarCarIdImagesImageIdSetPrimaryPutRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiApiAdminCarCarIdImagesImageIdSetPrimaryPut
     */
    readonly carId: string

    /**
     * 
     * @type {string}
     * @memberof AdminApiApiAdminCarCarIdImagesImageIdSetPrimaryPut
     */
    readonly imageId: string
}

/**
 * Request parameters for apiAdminCarCarIdImagesPost operation in AdminApi.
 * @export
 * @interface AdminApiApiAdminCarCarIdImagesPostRequest
 */
export interface AdminApiApiAdminCarCarIdImagesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiApiAdminCarCarIdImagesPost
     */
    readonly carId: string

    /**
     * 
     * @type {File}
     * @memberof AdminApiApiAdminCarCarIdImagesPost
     */
    readonly image?: File

    /**
     * 
     * @type {string}
     * @memberof AdminApiApiAdminCarCarIdImagesPost
     */
    readonly imageUrl?: string

    /**
     * 
     * @type {boolean}
     * @memberof AdminApiApiAdminCarCarIdImagesPost
     */
    readonly setAsPrimary?: boolean
}

/**
 * Request parameters for apiAdminCarCarIdImagesReorderPut operation in AdminApi.
 * @export
 * @interface AdminApiApiAdminCarCarIdImagesReorderPutRequest
 */
export interface AdminApiApiAdminCarCarIdImagesReorderPutRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiApiAdminCarCarIdImagesReorderPut
     */
    readonly carId: string

    /**
     * 
     * @type {Array<CarImageOrderItem>}
     * @memberof AdminApiApiAdminCarCarIdImagesReorderPut
     */
    readonly carImageOrderItem: Array<CarImageOrderItem>
}

/**
 * Request parameters for apiAdminCarIdDelete operation in AdminApi.
 * @export
 * @interface AdminApiApiAdminCarIdDeleteRequest
 */
export interface AdminApiApiAdminCarIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiApiAdminCarIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for apiAdminCarIdPut operation in AdminApi.
 * @export
 * @interface AdminApiApiAdminCarIdPutRequest
 */
export interface AdminApiApiAdminCarIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof AdminApiApiAdminCarIdPut
     */
    readonly id: string

    /**
     * 
     * @type {UpdateCarCommand}
     * @memberof AdminApiApiAdminCarIdPut
     */
    readonly updateCarCommand: UpdateCarCommand
}

/**
 * Request parameters for apiAdminCarPost operation in AdminApi.
 * @export
 * @interface AdminApiApiAdminCarPostRequest
 */
export interface AdminApiApiAdminCarPostRequest {
    /**
     * 
     * @type {CreateCarCommand}
     * @memberof AdminApiApiAdminCarPost
     */
    readonly createCarCommand: CreateCarCommand
}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 
     * @param {AdminApiApiAdminCarCarIdImagesImageIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminCarCarIdImagesImageIdPost(requestParameters: AdminApiApiAdminCarCarIdImagesImageIdPostRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminCarCarIdImagesImageIdPost(requestParameters.carId, requestParameters.imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminApiApiAdminCarCarIdImagesImageIdSetPrimaryPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminCarCarIdImagesImageIdSetPrimaryPut(requestParameters: AdminApiApiAdminCarCarIdImagesImageIdSetPrimaryPutRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminCarCarIdImagesImageIdSetPrimaryPut(requestParameters.carId, requestParameters.imageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminApiApiAdminCarCarIdImagesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminCarCarIdImagesPost(requestParameters: AdminApiApiAdminCarCarIdImagesPostRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminCarCarIdImagesPost(requestParameters.carId, requestParameters.image, requestParameters.imageUrl, requestParameters.setAsPrimary, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminApiApiAdminCarCarIdImagesReorderPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminCarCarIdImagesReorderPut(requestParameters: AdminApiApiAdminCarCarIdImagesReorderPutRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminCarCarIdImagesReorderPut(requestParameters.carId, requestParameters.carImageOrderItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminApiApiAdminCarIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminCarIdDelete(requestParameters: AdminApiApiAdminCarIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminCarIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminApiApiAdminCarIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminCarIdPut(requestParameters: AdminApiApiAdminCarIdPutRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminCarIdPut(requestParameters.id, requestParameters.updateCarCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminApiApiAdminCarPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminCarPost(requestParameters: AdminApiApiAdminCarPostRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminCarPost(requestParameters.createCarCommand, options).then((request) => request(this.axios, this.basePath));
    }
}

