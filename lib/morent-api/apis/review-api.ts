/* tslint:disable */
/* eslint-disable */
/**
 * Morent.WebApi | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { LeaveReviewRequest } from '../models';
// @ts-ignore
import type { ReviewDto } from '../models';
// @ts-ignore
import type { UpdateReviewRequest } from '../models';
/**
 * ReviewApi - axios parameter creator
 * @export
 */
export const ReviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} carId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewsCarCarIdGet: async (carId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carId' is not null or undefined
            assertParamExists('apiReviewsCarCarIdGet', 'carId', carId)
            const localVarPath = `/api/reviews/car/{carId}`
                .replace(`{${"carId"}}`, encodeURIComponent(String(carId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} carId 
         * @param {LeaveReviewRequest} leaveReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewsCarCarIdPost: async (carId: string, leaveReviewRequest: LeaveReviewRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carId' is not null or undefined
            assertParamExists('apiReviewsCarCarIdPost', 'carId', carId)
            // verify required parameter 'leaveReviewRequest' is not null or undefined
            assertParamExists('apiReviewsCarCarIdPost', 'leaveReviewRequest', leaveReviewRequest)
            const localVarPath = `/api/reviews/car/{carId}`
                .replace(`{${"carId"}}`, encodeURIComponent(String(carId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(leaveReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} reviewId 
         * @param {UpdateReviewRequest} updateReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewsReviewIdPut: async (reviewId: string, updateReviewRequest: UpdateReviewRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reviewId' is not null or undefined
            assertParamExists('apiReviewsReviewIdPut', 'reviewId', reviewId)
            // verify required parameter 'updateReviewRequest' is not null or undefined
            assertParamExists('apiReviewsReviewIdPut', 'updateReviewRequest', updateReviewRequest)
            const localVarPath = `/api/reviews/{reviewId}`
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewApi - functional programming interface
 * @export
 */
export const ReviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReviewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} carId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReviewsCarCarIdGet(carId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReviewDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReviewsCarCarIdGet(carId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewApi.apiReviewsCarCarIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} carId 
         * @param {LeaveReviewRequest} leaveReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReviewsCarCarIdPost(carId: string, leaveReviewRequest: LeaveReviewRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReviewsCarCarIdPost(carId, leaveReviewRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewApi.apiReviewsCarCarIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} reviewId 
         * @param {UpdateReviewRequest} updateReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReviewsReviewIdPut(reviewId: string, updateReviewRequest: UpdateReviewRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReviewsReviewIdPut(reviewId, updateReviewRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewApi.apiReviewsReviewIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReviewApi - factory interface
 * @export
 */
export const ReviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReviewApiFp(configuration)
    return {
        /**
         * 
         * @param {ReviewApiApiReviewsCarCarIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewsCarCarIdGet(requestParameters: ReviewApiApiReviewsCarCarIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ReviewDto>> {
            return localVarFp.apiReviewsCarCarIdGet(requestParameters.carId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReviewApiApiReviewsCarCarIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewsCarCarIdPost(requestParameters: ReviewApiApiReviewsCarCarIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiReviewsCarCarIdPost(requestParameters.carId, requestParameters.leaveReviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReviewApiApiReviewsReviewIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewsReviewIdPut(requestParameters: ReviewApiApiReviewsReviewIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiReviewsReviewIdPut(requestParameters.reviewId, requestParameters.updateReviewRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiReviewsCarCarIdGet operation in ReviewApi.
 * @export
 * @interface ReviewApiApiReviewsCarCarIdGetRequest
 */
export interface ReviewApiApiReviewsCarCarIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ReviewApiApiReviewsCarCarIdGet
     */
    readonly carId: string
}

/**
 * Request parameters for apiReviewsCarCarIdPost operation in ReviewApi.
 * @export
 * @interface ReviewApiApiReviewsCarCarIdPostRequest
 */
export interface ReviewApiApiReviewsCarCarIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ReviewApiApiReviewsCarCarIdPost
     */
    readonly carId: string

    /**
     * 
     * @type {LeaveReviewRequest}
     * @memberof ReviewApiApiReviewsCarCarIdPost
     */
    readonly leaveReviewRequest: LeaveReviewRequest
}

/**
 * Request parameters for apiReviewsReviewIdPut operation in ReviewApi.
 * @export
 * @interface ReviewApiApiReviewsReviewIdPutRequest
 */
export interface ReviewApiApiReviewsReviewIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ReviewApiApiReviewsReviewIdPut
     */
    readonly reviewId: string

    /**
     * 
     * @type {UpdateReviewRequest}
     * @memberof ReviewApiApiReviewsReviewIdPut
     */
    readonly updateReviewRequest: UpdateReviewRequest
}

/**
 * ReviewApi - object-oriented interface
 * @export
 * @class ReviewApi
 * @extends {BaseAPI}
 */
export class ReviewApi extends BaseAPI {
    /**
     * 
     * @param {ReviewApiApiReviewsCarCarIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public apiReviewsCarCarIdGet(requestParameters: ReviewApiApiReviewsCarCarIdGetRequest, options?: RawAxiosRequestConfig) {
        return ReviewApiFp(this.configuration).apiReviewsCarCarIdGet(requestParameters.carId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReviewApiApiReviewsCarCarIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public apiReviewsCarCarIdPost(requestParameters: ReviewApiApiReviewsCarCarIdPostRequest, options?: RawAxiosRequestConfig) {
        return ReviewApiFp(this.configuration).apiReviewsCarCarIdPost(requestParameters.carId, requestParameters.leaveReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReviewApiApiReviewsReviewIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public apiReviewsReviewIdPut(requestParameters: ReviewApiApiReviewsReviewIdPutRequest, options?: RawAxiosRequestConfig) {
        return ReviewApiFp(this.configuration).apiReviewsReviewIdPut(requestParameters.reviewId, requestParameters.updateReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

