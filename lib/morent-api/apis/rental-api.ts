/* tslint:disable */
/* eslint-disable */
/**
 * Morent.WebApi | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RentalDto } from '../models';
/**
 * RentalApi - axios parameter creator
 * @export
 */
export const RentalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {string} [carId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRentalsCarIdPost: async (id: string, body: object, carId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRentalsCarIdPost', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiRentalsCarIdPost', 'body', body)
            const localVarPath = `/api/rentals/car/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (carId !== undefined) {
                localVarQueryParameter['carId'] = carId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRentalsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rentals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRentalsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRentalsIdGet', 'id', id)
            const localVarPath = `/api/rentals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RentalApi - functional programming interface
 * @export
 */
export const RentalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RentalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {string} [carId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRentalsCarIdPost(id: string, body: object, carId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRentalsCarIdPost(id, body, carId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RentalApi.apiRentalsCarIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRentalsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RentalDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRentalsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RentalApi.apiRentalsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRentalsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RentalDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRentalsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RentalApi.apiRentalsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RentalApi - factory interface
 * @export
 */
export const RentalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RentalApiFp(configuration)
    return {
        /**
         * 
         * @param {RentalApiApiRentalsCarIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRentalsCarIdPost(requestParameters: RentalApiApiRentalsCarIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiRentalsCarIdPost(requestParameters.id, requestParameters.body, requestParameters.carId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRentalsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<RentalDto>> {
            return localVarFp.apiRentalsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RentalApiApiRentalsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRentalsIdGet(requestParameters: RentalApiApiRentalsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<RentalDto> {
            return localVarFp.apiRentalsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiRentalsCarIdPost operation in RentalApi.
 * @export
 * @interface RentalApiApiRentalsCarIdPostRequest
 */
export interface RentalApiApiRentalsCarIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof RentalApiApiRentalsCarIdPost
     */
    readonly id: string

    /**
     * 
     * @type {object}
     * @memberof RentalApiApiRentalsCarIdPost
     */
    readonly body: object

    /**
     * 
     * @type {string}
     * @memberof RentalApiApiRentalsCarIdPost
     */
    readonly carId?: string
}

/**
 * Request parameters for apiRentalsIdGet operation in RentalApi.
 * @export
 * @interface RentalApiApiRentalsIdGetRequest
 */
export interface RentalApiApiRentalsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RentalApiApiRentalsIdGet
     */
    readonly id: string
}

/**
 * RentalApi - object-oriented interface
 * @export
 * @class RentalApi
 * @extends {BaseAPI}
 */
export class RentalApi extends BaseAPI {
    /**
     * 
     * @param {RentalApiApiRentalsCarIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentalApi
     */
    public apiRentalsCarIdPost(requestParameters: RentalApiApiRentalsCarIdPostRequest, options?: RawAxiosRequestConfig) {
        return RentalApiFp(this.configuration).apiRentalsCarIdPost(requestParameters.id, requestParameters.body, requestParameters.carId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentalApi
     */
    public apiRentalsGet(options?: RawAxiosRequestConfig) {
        return RentalApiFp(this.configuration).apiRentalsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RentalApiApiRentalsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentalApi
     */
    public apiRentalsIdGet(requestParameters: RentalApiApiRentalsIdGetRequest, options?: RawAxiosRequestConfig) {
        return RentalApiFp(this.configuration).apiRentalsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

