/* tslint:disable */
/* eslint-disable */
/**
 * Morent.WebApi | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CarDetailDto } from '../models';
// @ts-ignore
import type { CarDto } from '../models';
// @ts-ignore
import type { CarImageDto } from '../models';
// @ts-ignore
import type { CarLocationDto } from '../models';
// @ts-ignore
import type { ProblemDetails } from '../models';
// @ts-ignore
import type { ReviewDto } from '../models';
/**
 * CarApi - axios parameter creator
 * @export
 */
export const CarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} carId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarsCarIdGet: async (carId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carId' is not null or undefined
            assertParamExists('apiCarsCarIdGet', 'carId', carId)
            const localVarPath = `/api/cars/{carId}`
                .replace(`{${"carId"}}`, encodeURIComponent(String(carId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} carId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarsCarIdImagesGet: async (carId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carId' is not null or undefined
            assertParamExists('apiCarsCarIdImagesGet', 'carId', carId)
            const localVarPath = `/api/cars/{carId}/images`
                .replace(`{${"carId"}}`, encodeURIComponent(String(carId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} carId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarsCarIdReviewsGet: async (carId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carId' is not null or undefined
            assertParamExists('apiCarsCarIdReviewsGet', 'carId', carId)
            const localVarPath = `/api/cars/{carId}/reviews`
                .replace(`{${"carId"}}`, encodeURIComponent(String(carId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [carFilterBrand] 
         * @param {string} [carFilterType] 
         * @param {number} [carFilterCapacity] 
         * @param {string} [carFilterFuelType] 
         * @param {string} [carFilterGearbox] 
         * @param {number} [carFilterMinPrice] 
         * @param {number} [carFilterMaxPrice] 
         * @param {number} [carFilterRating] 
         * @param {string} [carFilterLocation] 
         * @param {string} [carFilterSearch] 
         * @param {string} [carFilterSort] 
         * @param {number} [pagedQueryPage] 
         * @param {number} [pagedQueryPageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarsGet: async (carFilterBrand?: string, carFilterType?: string, carFilterCapacity?: number, carFilterFuelType?: string, carFilterGearbox?: string, carFilterMinPrice?: number, carFilterMaxPrice?: number, carFilterRating?: number, carFilterLocation?: string, carFilterSearch?: string, carFilterSort?: string, pagedQueryPage?: number, pagedQueryPageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (carFilterBrand !== undefined) {
                localVarQueryParameter['carFilter.Brand'] = carFilterBrand;
            }

            if (carFilterType !== undefined) {
                localVarQueryParameter['carFilter.Type'] = carFilterType;
            }

            if (carFilterCapacity !== undefined) {
                localVarQueryParameter['carFilter.Capacity'] = carFilterCapacity;
            }

            if (carFilterFuelType !== undefined) {
                localVarQueryParameter['carFilter.FuelType'] = carFilterFuelType;
            }

            if (carFilterGearbox !== undefined) {
                localVarQueryParameter['carFilter.Gearbox'] = carFilterGearbox;
            }

            if (carFilterMinPrice !== undefined) {
                localVarQueryParameter['carFilter.MinPrice'] = carFilterMinPrice;
            }

            if (carFilterMaxPrice !== undefined) {
                localVarQueryParameter['carFilter.MaxPrice'] = carFilterMaxPrice;
            }

            if (carFilterRating !== undefined) {
                localVarQueryParameter['carFilter.Rating'] = carFilterRating;
            }

            if (carFilterLocation !== undefined) {
                localVarQueryParameter['carFilter.Location'] = carFilterLocation;
            }

            if (carFilterSearch !== undefined) {
                localVarQueryParameter['carFilter.Search'] = carFilterSearch;
            }

            if (carFilterSort !== undefined) {
                localVarQueryParameter['carFilter.Sort'] = carFilterSort;
            }

            if (pagedQueryPage !== undefined) {
                localVarQueryParameter['pagedQuery.Page'] = pagedQueryPage;
            }

            if (pagedQueryPageSize !== undefined) {
                localVarQueryParameter['pagedQuery.PageSize'] = pagedQueryPageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [longitude] 
         * @param {number} [latitude] 
         * @param {number} [maxDistanceKm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarsNearGet: async (longitude?: number, latitude?: number, maxDistanceKm?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cars/near`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (longitude !== undefined) {
                localVarQueryParameter['Longitude'] = longitude;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['Latitude'] = latitude;
            }

            if (maxDistanceKm !== undefined) {
                localVarQueryParameter['MaxDistanceKm'] = maxDistanceKm;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarApi - functional programming interface
 * @export
 */
export const CarApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} carId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarsCarIdGet(carId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarDetailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarsCarIdGet(carId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarApi.apiCarsCarIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} carId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarsCarIdImagesGet(carId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CarImageDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarsCarIdImagesGet(carId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarApi.apiCarsCarIdImagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} carId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarsCarIdReviewsGet(carId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReviewDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarsCarIdReviewsGet(carId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarApi.apiCarsCarIdReviewsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [carFilterBrand] 
         * @param {string} [carFilterType] 
         * @param {number} [carFilterCapacity] 
         * @param {string} [carFilterFuelType] 
         * @param {string} [carFilterGearbox] 
         * @param {number} [carFilterMinPrice] 
         * @param {number} [carFilterMaxPrice] 
         * @param {number} [carFilterRating] 
         * @param {string} [carFilterLocation] 
         * @param {string} [carFilterSearch] 
         * @param {string} [carFilterSort] 
         * @param {number} [pagedQueryPage] 
         * @param {number} [pagedQueryPageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarsGet(carFilterBrand?: string, carFilterType?: string, carFilterCapacity?: number, carFilterFuelType?: string, carFilterGearbox?: string, carFilterMinPrice?: number, carFilterMaxPrice?: number, carFilterRating?: number, carFilterLocation?: string, carFilterSearch?: string, carFilterSort?: string, pagedQueryPage?: number, pagedQueryPageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CarDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarsGet(carFilterBrand, carFilterType, carFilterCapacity, carFilterFuelType, carFilterGearbox, carFilterMinPrice, carFilterMaxPrice, carFilterRating, carFilterLocation, carFilterSearch, carFilterSort, pagedQueryPage, pagedQueryPageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarApi.apiCarsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [longitude] 
         * @param {number} [latitude] 
         * @param {number} [maxDistanceKm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarsNearGet(longitude?: number, latitude?: number, maxDistanceKm?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CarLocationDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCarsNearGet(longitude, latitude, maxDistanceKm, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarApi.apiCarsNearGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CarApi - factory interface
 * @export
 */
export const CarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarApiFp(configuration)
    return {
        /**
         * 
         * @param {CarApiApiCarsCarIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarsCarIdGet(requestParameters: CarApiApiCarsCarIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CarDetailDto> {
            return localVarFp.apiCarsCarIdGet(requestParameters.carId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarApiApiCarsCarIdImagesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarsCarIdImagesGet(requestParameters: CarApiApiCarsCarIdImagesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<CarImageDto>> {
            return localVarFp.apiCarsCarIdImagesGet(requestParameters.carId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarApiApiCarsCarIdReviewsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarsCarIdReviewsGet(requestParameters: CarApiApiCarsCarIdReviewsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ReviewDto>> {
            return localVarFp.apiCarsCarIdReviewsGet(requestParameters.carId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarApiApiCarsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarsGet(requestParameters: CarApiApiCarsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<CarDto>> {
            return localVarFp.apiCarsGet(requestParameters.carFilterBrand, requestParameters.carFilterType, requestParameters.carFilterCapacity, requestParameters.carFilterFuelType, requestParameters.carFilterGearbox, requestParameters.carFilterMinPrice, requestParameters.carFilterMaxPrice, requestParameters.carFilterRating, requestParameters.carFilterLocation, requestParameters.carFilterSearch, requestParameters.carFilterSort, requestParameters.pagedQueryPage, requestParameters.pagedQueryPageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarApiApiCarsNearGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarsNearGet(requestParameters: CarApiApiCarsNearGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<CarLocationDto>> {
            return localVarFp.apiCarsNearGet(requestParameters.longitude, requestParameters.latitude, requestParameters.maxDistanceKm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiCarsCarIdGet operation in CarApi.
 * @export
 * @interface CarApiApiCarsCarIdGetRequest
 */
export interface CarApiApiCarsCarIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CarApiApiCarsCarIdGet
     */
    readonly carId: string
}

/**
 * Request parameters for apiCarsCarIdImagesGet operation in CarApi.
 * @export
 * @interface CarApiApiCarsCarIdImagesGetRequest
 */
export interface CarApiApiCarsCarIdImagesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CarApiApiCarsCarIdImagesGet
     */
    readonly carId: string
}

/**
 * Request parameters for apiCarsCarIdReviewsGet operation in CarApi.
 * @export
 * @interface CarApiApiCarsCarIdReviewsGetRequest
 */
export interface CarApiApiCarsCarIdReviewsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CarApiApiCarsCarIdReviewsGet
     */
    readonly carId: string
}

/**
 * Request parameters for apiCarsGet operation in CarApi.
 * @export
 * @interface CarApiApiCarsGetRequest
 */
export interface CarApiApiCarsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CarApiApiCarsGet
     */
    readonly carFilterBrand?: string

    /**
     * 
     * @type {string}
     * @memberof CarApiApiCarsGet
     */
    readonly carFilterType?: string

    /**
     * 
     * @type {number}
     * @memberof CarApiApiCarsGet
     */
    readonly carFilterCapacity?: number

    /**
     * 
     * @type {string}
     * @memberof CarApiApiCarsGet
     */
    readonly carFilterFuelType?: string

    /**
     * 
     * @type {string}
     * @memberof CarApiApiCarsGet
     */
    readonly carFilterGearbox?: string

    /**
     * 
     * @type {number}
     * @memberof CarApiApiCarsGet
     */
    readonly carFilterMinPrice?: number

    /**
     * 
     * @type {number}
     * @memberof CarApiApiCarsGet
     */
    readonly carFilterMaxPrice?: number

    /**
     * 
     * @type {number}
     * @memberof CarApiApiCarsGet
     */
    readonly carFilterRating?: number

    /**
     * 
     * @type {string}
     * @memberof CarApiApiCarsGet
     */
    readonly carFilterLocation?: string

    /**
     * 
     * @type {string}
     * @memberof CarApiApiCarsGet
     */
    readonly carFilterSearch?: string

    /**
     * 
     * @type {string}
     * @memberof CarApiApiCarsGet
     */
    readonly carFilterSort?: string

    /**
     * 
     * @type {number}
     * @memberof CarApiApiCarsGet
     */
    readonly pagedQueryPage?: number

    /**
     * 
     * @type {number}
     * @memberof CarApiApiCarsGet
     */
    readonly pagedQueryPageSize?: number
}

/**
 * Request parameters for apiCarsNearGet operation in CarApi.
 * @export
 * @interface CarApiApiCarsNearGetRequest
 */
export interface CarApiApiCarsNearGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CarApiApiCarsNearGet
     */
    readonly longitude?: number

    /**
     * 
     * @type {number}
     * @memberof CarApiApiCarsNearGet
     */
    readonly latitude?: number

    /**
     * 
     * @type {number}
     * @memberof CarApiApiCarsNearGet
     */
    readonly maxDistanceKm?: number
}

/**
 * CarApi - object-oriented interface
 * @export
 * @class CarApi
 * @extends {BaseAPI}
 */
export class CarApi extends BaseAPI {
    /**
     * 
     * @param {CarApiApiCarsCarIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public apiCarsCarIdGet(requestParameters: CarApiApiCarsCarIdGetRequest, options?: RawAxiosRequestConfig) {
        return CarApiFp(this.configuration).apiCarsCarIdGet(requestParameters.carId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarApiApiCarsCarIdImagesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public apiCarsCarIdImagesGet(requestParameters: CarApiApiCarsCarIdImagesGetRequest, options?: RawAxiosRequestConfig) {
        return CarApiFp(this.configuration).apiCarsCarIdImagesGet(requestParameters.carId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarApiApiCarsCarIdReviewsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public apiCarsCarIdReviewsGet(requestParameters: CarApiApiCarsCarIdReviewsGetRequest, options?: RawAxiosRequestConfig) {
        return CarApiFp(this.configuration).apiCarsCarIdReviewsGet(requestParameters.carId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarApiApiCarsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public apiCarsGet(requestParameters: CarApiApiCarsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return CarApiFp(this.configuration).apiCarsGet(requestParameters.carFilterBrand, requestParameters.carFilterType, requestParameters.carFilterCapacity, requestParameters.carFilterFuelType, requestParameters.carFilterGearbox, requestParameters.carFilterMinPrice, requestParameters.carFilterMaxPrice, requestParameters.carFilterRating, requestParameters.carFilterLocation, requestParameters.carFilterSearch, requestParameters.carFilterSort, requestParameters.pagedQueryPage, requestParameters.pagedQueryPageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarApiApiCarsNearGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarApi
     */
    public apiCarsNearGet(requestParameters: CarApiApiCarsNearGetRequest = {}, options?: RawAxiosRequestConfig) {
        return CarApiFp(this.configuration).apiCarsNearGet(requestParameters.longitude, requestParameters.latitude, requestParameters.maxDistanceKm, options).then((request) => request(this.axios, this.basePath));
    }
}

